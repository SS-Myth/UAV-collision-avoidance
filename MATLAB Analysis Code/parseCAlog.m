function [log, collisionPoints] = parseCAlog(filename)
% NGCP 2018-2019
% Author: Tristan Sherman
% Takes in a log file generated by collision avoidance code and outputs it
% into a log matrix
% INPUT: filename in function directory
% OUTPU VARIABLE: log
%               1            |            2                ...
%   1  last lat              |  last lon
%   2  second to last        |  lat second to last lon 
%   3  current lat           |  current lon
%   4  xvel (North)          |  yvel (East)
%   5  predicted point 1 lat |  predicted point 1 lon
%   6  predicted point 2 lat |  predicted point 2 lon
%   7        etc...          |         etc...
% 
% 
% OUTPUT VARIABLE: collisionPoints (Data about collision points)
%
%       1      Distance at predicted collision
%       2      avoidBufferSize
%       3      k: distance between waypoint and B
%       4      slopeAB
%       5      slopeBC
%       6      avoidWP X displacement
%       7      avoidWP Y displacement
%       8      avoidWP lat (x)
%       9      avoidWP lon (y)
          

% Define what output names are
lastlat = 'last lattitude';
lastlon = 'last ongitude';
secondlat = 'second to last lattitude';
secondlon = 'second to last Longitude';
ourLat = 'Our lattitude';
ourLon = 'Our Longitude';
newPoint = 'New point';
futureTime = 'Time interval';
% futureLat = 'ourFuturePos.x';
% futureLon = 'outFuturePos.y';
xvel = 'X Velocity';
yvel = 'Y Velocity';
collision = 'COLLISION DETECTED';

fid = fopen(filename,'rt');


tline = fgetl(fid);
nlines = 1;
m = 0;
k = 0;
n = -1;
%while ischar(tline)
  while ischar(tline)
      
      
      %If new point then skip to next line
      if contains(tline, newPoint)
            n = n + 2;
            tline = fgetl(fid);
            %Store timestamp
            timestamp = tline(1:23);
      end
      
      % ~~~~~~~~~~~~~~~~~~~~
      % Log GPS positions
      % ~~~~~~~~~~~~~~~~~~~~
      
      % Very last lat and lon
      if and(contains(tline, lastlat),~contains(tline,secondlat))
            m = 1; %Start at the top of a new row
            log(m,n) = str2num(tline(41:end)); %last latitude
      end
      if contains(tline, lastlon)
            log(m,n+1) = str2num(tline(40:end)); %last longitude
      end
      
      
      % Store second to last GPS positions
      if contains(tline,secondlat)      
            m = m+1;
            log(m,n) = str2num(tline(52:end)); %second to last latitude
      end
      if contains(tline,secondlon)
            log(m,n+1) = str2num(tline(52:end)); %second to last longitude
      end
     
      % Parse current vehicle position
      if contains(tline, ourLat)
          m = m+1;
          currentLat = tline(end-8:end);
          log(m,n) = str2num(currentLat);
      end
      if contains(tline,ourLon)
          currentLon = str2num(tline(41:end));
          log(m,n+1) = currentLon;
      end
          
      
       %Parse vehicle velocity
      if contains(tline, xvel)
          m = m + 1;
          log(m,n) = str2num(tline(41:end));%X velocity
      end
      if contains(tline,yvel)
          log(m,n+1) = str2num(tline(41:end)); %Yvelocity
      end

      while contains(tline,futureTime)
          %m = m + 1;
          %future time step
          %log(m,n) = str2num(tline(end));
          tline = fgetl(fid);
          if ischar(tline)
              m = m + 1;
              %latitude at future time step
              log(m,n) = str2num(tline(42:end));
          end
              
          tline = fgetl(fid);
          if ischar(tline)
              %longitude at future time step
              log(m,n+1) = str2num(tline(42:end));
          end
      end
                
      if contains(tline, collision)
         log(m+1,n) = 1;
      end
      
      % Parse collision point
      if contains(tline, collision)

          
          
          
          
          %column of collision point log
          k = k + 1;
          collisionPoints(1,k) = str2num(tline(21:23)); %Timestamp of collision
          
          
          tline = fgetl(fid);
          if contains(tline, 'Distance at predicted collision')
          %tline = fgetl(fid);
          collisionPoints(2,k) = str2num(tline(59:end));
          end
          
          
          tline = fgetl(fid);
          if contains(tline, 'avoidBufferSize')
          %tline = fgetl(fid);
          collisionPoints(3,k) = str2num(tline(42:end));
          end
          
          tline = fgetl(fid);
          if contains(tline, 'k: distance between waypoint and B')
          %tline = fgetl(fid);
          collisionPoints(4,k) = str2num(tline(62:end));
          end
          
          tline = fgetl(fid);
          if contains(tline, 'slopeAB')
          %tline = fgetl(fid);
          collisionPoints(5,k) = str2num(tline(35:end));
          end
          
          tline = fgetl(fid);
          if contains(tline, 'slopeBC')
          %tline = fgetl(fid);
          collisionPoints(6,k) = str2num(tline(35:end));
          end
          
          tline = fgetl(fid);
          if contains(tline, 'avoidWP X displacement')
          %tline = fgetl(fid);
          collisionPoints(7,k) = str2num(tline(50:end));
          end
          
          tline = fgetl(fid);
          if contains(tline, 'avoidWP Y displacement')
          %tline = fgetl(fid);
          collisionPoints(8,k) = str2num(tline(50:end));
          end
          
          tline = fgetl(fid);
          if contains(tline, 'avoidWP lat (x)')
              if tline(23) == ' '
                  %tline = fgetl(fid);
                  collisionPoints(9,k) = str2num(tline(42:end));
              else
                  collisionPoints(9,k) = str2num(tline(43:end));
              end
          end
          
          tline = fgetl(fid);
          if contains(tline, 'avoidWP lon (y)')
              %tline = fgetl(fid);
              
              % In one case the timestamp omitted the last number of the
              % microseconds and changed the char length
              if tline(23) == ' '
                collisionPoints(10,k) = str2num(tline(42:end));
              else
                collisionPoints(10,k) = str2num(tline(43:end));  
              end
          end
      end
          
          tline = fgetl(fid);
          nlines = nlines+1;
          
      
          
          
          
  end

  fclose('all');
  
end
